{"version":3,"sources":["services/studentServices.js","components/students.jsx","components/studentForm.jsx","App.js","serviceWorker.js","index.js"],"names":["getStudent","studentId","Axios","get","defaults","baseURL","process","Students","state","students","handleDelete","student","a","console","log","originalStudents","filter","stud","_id","setState","movieId","delete","response","this","data","Fragment","className","map","key","rollno","name","class","type","onClick","to","Component","StudentForm","gender","phone","address","populateStudent","props","match","params","id","handleSubmit","e","preventDefault","put","post","history","push","handleChange","currentTarget","value","onSubmit","htmlFor","placeholder","onChange","defaultValue","rows","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.088b7475.chunk.js","sourcesContent":["import Axios from \"axios\";\r\n\r\nAxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nexport function getStudents() {\r\n  return Axios.get(\"/students\");\r\n}\r\n\r\nexport function getStudent(studentId) {\r\n  return Axios.get(\"/students/\" + studentId);\r\n}\r\n\r\nexport function deleteStudent(movieId) {\r\n  return Axios.delete(\"/students/\" + movieId);\r\n}\r\n\r\nexport function saveStudent(student) {\r\n  // if '_id' property is there, then its a PUT request otherwise its POST request.\r\n  if (student._id) {\r\n    return Axios.put(\"/students/\" + student._id, {\r\n      name: student.name,\r\n      rollno: student.rollno,\r\n      class: student.class,\r\n      phone: student.phone,\r\n      gender: student.gender,\r\n      address: student.address\r\n    });\r\n  } else return Axios.post(\"/students/\", student);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { getStudents, deleteStudent } from \"../services/studentServices\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Students extends Component {\r\n  state = {\r\n    students: []\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const response = await getStudents();\r\n    console.log(response);\r\n    this.setState({ students: response.data });\r\n  }\r\n\r\n  handleDelete = async student => {\r\n    console.log(\"Handle delete: \", student);\r\n    const originalStudents = this.state.students;\r\n    const students = originalStudents.filter(stud => stud._id !== student._id);\r\n    this.setState({ students });\r\n\r\n    try {\r\n      await deleteStudent(student._id);\r\n    } catch (ex) {\r\n      console.log(ex);\r\n      this.setState({ students: originalStudents });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { students } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <h1>Students</h1>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Roll</th>\r\n                <th>Name</th>\r\n                <th>Class</th>\r\n                <th></th>\r\n                <th></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {students.map(student => (\r\n                <tr key={student._id}>\r\n                  <td>{student.rollno}</td>\r\n                  <td>{student.name}</td>\r\n                  <td>{student.class}</td>\r\n                  <td>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"close\"\r\n                      onClick={() => this.handleDelete(student)}\r\n                    >\r\n                      &times;\r\n                    </button>\r\n                  </td>\r\n                  <td>\r\n                    <Link to={\"/studentForm/\" + student._id}>\r\n                      <i className=\"fas fa-user-edit\"></i>\r\n                    </Link>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <Link to=\"/studentForm/new\">\r\n            <button type=\"button\" className=\"btn btn-primary btn-lg\">\r\n              Add Student&nbsp;&nbsp;\r\n              <i className=\"fas fa-user-plus\"></i>\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Students;\r\n","import React, { Component } from \"react\";\r\nimport { saveStudent, getStudent } from \"../services/studentServices\";\r\n\r\nclass StudentForm extends Component {\r\n  state = {\r\n    data: {\r\n      name: \"\",\r\n      rollno: \"\",\r\n      class: \"\",\r\n      gender: \"\",\r\n      phone: \"\",\r\n      address: \"\"\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.populateStudent();\r\n  }\r\n\r\n  populateStudent = async () => {\r\n    const studentId = this.props.match.params.id;\r\n    if (studentId === \"new\") return;\r\n\r\n    const { data: student } = await getStudent(studentId);\r\n    console.log(student);\r\n    this.setState({ data: student });\r\n  };\r\n\r\n  handleSubmit = async e => {\r\n    e.preventDefault();\r\n    console.log(\"Handle submit\");\r\n    console.log(this.state.data);\r\n\r\n    const response = await saveStudent(this.state.data);\r\n    this.props.history.push(\"/\");\r\n    console.log(response);\r\n  };\r\n\r\n  handleChange = e => {\r\n    const data = { ...this.state.data };\r\n    data[e.currentTarget.id] = e.currentTarget.value;\r\n    this.setState({ data });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-md-5\">\r\n          <h1>\r\n            {this.props.match.params.id === \"new\" ? \"New\" : \"\"} Student Form\r\n          </h1>\r\n          <form onSubmit={this.handleSubmit}>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"name\">Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"name\"\r\n                placeholder=\"Enter name\"\r\n                onChange={this.handleChange}\r\n                value={this.state.data.name}\r\n              />\r\n            </div>\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group col\">\r\n                <label htmlFor=\"class\">Class</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"class\"\r\n                  placeholder=\"Enter class\"\r\n                  onChange={this.handleChange}\r\n                  value={this.state.data.class}\r\n                />\r\n              </div>\r\n              <div className=\"form-group col\">\r\n                <label htmlFor=\"rollno\">Roll No.</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"rollno\"\r\n                  placeholder=\"Enter roll no.\"\r\n                  onChange={this.handleChange}\r\n                  value={this.state.data.rollno}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"gender\">Gender</label>\r\n              <select\r\n                className=\"form-control\"\r\n                id=\"gender\"\r\n                onChange={this.handleChange}\r\n                value={this.state.data.gender}\r\n              >\r\n                <option defaultValue>Select Gender</option>\r\n                <option>Female</option>\r\n                <option>Male</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"phone\">Phone</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"phone\"\r\n                placeholder=\"Enter Phone\"\r\n                onChange={this.handleChange}\r\n                value={this.state.data.phone}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"address\">Address</label>\r\n              <textarea\r\n                className=\"form-control\"\r\n                id=\"address\"\r\n                rows=\"3\"\r\n                onChange={this.handleChange}\r\n                value={this.state.data.address}\r\n              ></textarea>\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StudentForm;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { Switch, Route } from \"react-router-dom\";\n\nimport Students from \"./components/students\";\nimport StudentForm from \"./components/studentForm\";\n\nfunction App() {\n  return (\n    <React-Fragment>\n      <Switch>\n        <Route path=\"/\" exact component={Students} />\n        <Route path=\"/studentForm/:id\" component={StudentForm} />\n      </Switch>\n    </React-Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}